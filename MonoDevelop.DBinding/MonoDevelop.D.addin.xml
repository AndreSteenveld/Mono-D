<Addin id="DBinding" 
	namespace="MonoDevelop" 
	name="D Language Binding" 
	author="Alexander Bothe" 
	url="http://mono-d.sourceforge.net"
	copyright="" 
	description="A language binding to the D Programming Language" 
	category="Language Bindings" 
	version="1.0">
	
	<Dependencies>
		<Addin id="Ide" version="2.6" />
		<Addin id="Core" version="2.6" />
	</Dependencies>
	
	<Extension path = "/MonoDevelop/ProjectModel/MSBuildItemTypes">
		<DotNetProject 
			language="D" 
			extension=".dproj" 
			resourceHandler="Project.CSharpResourceIdBuilder"
			/>
	</Extension>

	<Extension path = "/MonoDevelop/Ide/FileTemplates">
		<FileTemplate id = "DEmptyFile" resource = "EmptyDFile.xft.xml"/>
	</Extension>

	<Extension path = "/MonoDevelop/Ide/ProjectTemplates">
		<ProjectTemplate id = "DConsoleProject" resource = "ConsoleProject.xpt.xml"/>
		<ProjectTemplate id = "DEmptyProject" resource = "EmptyProject.xpt.xml"/>
		<ProjectTemplate id = "DLibrary" resource = "Library.xpt.xml"/>
	</Extension>
	
	<Extension path = "/MonoDevelop/Ide/FileFilters">
		<FileFilter id = "D"
		            insertbefore="AllFiles"
		            _label = "D Files"
			    extensions = "*.d,*.di"/>
	</Extension>

	<Extension path = "/MonoDevelop/ProjectModel/Gui/ItemOptionPanels/Build/General">
		<Condition id="ActiveLanguage" value="D">
			<Panel id = "DCompilerOptionsPanel"
			             _label = "D"
			             class = "Project.CompilerOptionsPanel"/>
		</Condition>
	</Extension>

	<!--<Extension path = "/MonoDevelop/ProjectModel/Gui/ItemOptionPanels/Build/Compiler">
		<Condition id="ActiveLanguage" value="D">
			<Panel id = "DCodeGenerationPanel"
			             _label = "Compiler"
			             class = "Project.CodeGenerationPanel"/>
		</Condition>
	</Extension>-->
	
	<Extension path = "/MonoDevelop/ProjectModel/LanguageBindings">
		<LanguageBinding id    = "D"
		                 supportedextensions = ".d,.di"
		                 class = "DLanguageBinding" />
	</Extension>
	
	<Extension path = "/MonoDevelop/Ide/ReferenceFinder">
		<ReferenceFinder supportedmimetypes = "text/x-d"
		                 class = "Refactoring.DReferenceFinder" />
	</Extension>
	
	<Extension path = "/MonoDevelop/ProjectModel/SerializableClasses">
		<DataType class = "Project.DCompilerParameters" />
		<DataType class = "Project.DProjectParameters" />
	</Extension>

	<Extension path = "/MonoDevelop/Ide/TextEditorExtensions">
		<Class fileExtensions = ".d" class = "Completion.DTextEditorCompletion" />
		<Class fileExtensions = ".d" class = "Formatting.DTextEditorIndentation" />
		<Class fileExtensions = ".d" class = "Highlighting.HighlightUsagesExtension" />
	</Extension>
	<!--
	<Extension path = "/MonoDevelop/ProjectModel/MD1SerializationMaps">
		<SerializationMap resource="md1format.xml" />
	</Extension>-->
	
	<Extension path = "/MonoDevelop/ProjectModel/DomParser">
		<Parser class = "Parser.NRefactoryParser" fileExtensions=".d,.di" />
		<Parser class = "Parser.McsParser" fileExtensions=".d,.di" />
	</Extension>
	<!--
	<Extension path = "/MonoDevelop/ProjectModel/Ambiences">
		<Class id = "C#" class = "Ast.DAmbience" />
	</Extension>-->
	
	<Extension path = "/MonoDevelop/Core/StockIcons">
		<StockIcon stockid = "d-file" resource = "dfile16.png" />
		<StockIcon stockid = "d-project" resource = "dproj16.png" />
	</Extension>
	
	<Extension path = "/MonoDevelop/Core/MimeTypes">
		<MimeType id="text/x-d" _description="D source code" icon="d-file" isText="true">
			<File pattern="*.d" />
			<File pattern="*.di" />
		</MimeType>
	</Extension>
	
	<Extension path = "/MonoDevelop/Ide/CodeFormatters">
		<Formatter mimeType="text/x-d" class="Formatting.DFormatter" />
	</Extension>
	
	<Extension path = "/MonoDevelop/SourceEditor2/CustomModes">
		<SyntaxMode mimeTypes="text/x-d" class="Highlighting.DSyntaxMode"/>
	</Extension>
	
	<Extension path = "/MonoDevelop/ProjectModel/PolicySets/Mono" >
		<Policies resource="MonoDPolicy.xml" />
	</Extension>
	<!--
	<Extension path = "/MonoDevelop/ProjectModel/Gui/MimeTypePolicyPanels">
		<Panel id = "DFormatting" _label = "D Format" mimeType="text/x-d" class = "Formatting.DFormattingPolicyPanel" />
	</Extension>-->

	<Extension path = "/MonoDevelop/Refactoring/ASTProvider">
		<Class class = "Refactoring.DNRefactoryASTProvider" />
	</Extension>
	
	<Extension path = "/MonoDevelop/Ide/TextEditorResolver">
		<Resolver class = "Resolver.TextEditorResolverProvider" mimeType="text/x-d" />
	</Extension>
	
	<!--
	<Extension path = "/MonoDevelop/Ide/Commands/TextEditor">
		<Command id = "Highlighting.MoveToUsagesCommand.PrevUsage"
		         defaultHandler = "MonoDevelop.CSharp.Highlighting.MoveToPrevUsageHandler"
		         shortcut = "Ctrl|Shift|Up"
		         macShortcut = "Meta|Shift|Up"
		         _label = "_Move to prev usage"/>
		<Command id = "MonoDevelop.CSharp.Highlighting.MoveToUsagesCommand.NextUsage"
		         defaultHandler = "MonoDevelop.CSharp.Highlighting.MoveToNextUsageHandler"
		         shortcut = "Ctrl|Shift|Down"
		         macShortcut = "Meta|Shift|Down"
		         _label = "_Move to next usage"/>
	</Extension>-->
	<!--
	<Extension path = "/MonoDevelop/ProjectModel/CodeGenerators">
		<Generator class="MonoDevelop.CSharp.Refactoring.CSharpCodeGenerator" mimeType = "text/x-csharp" />
	</Extension>
	-->
	<!--
	<Extension path = "/MonoDevelop/Refactoring/Refactorings">
		<Class id="CreateMethod" class = "MonoDevelop.CSharp.Refactoring.CreateMethod.CreateMethodCodeGenerator" />
		<Class id="ExtractMethod" class = "MonoDevelop.CSharp.Refactoring.ExtractMethod.ExtractMethodRefactoring" />
	</Extension>
	-->
	<!--
	<Extension path = "/MonoDevelop/Ide/Commands/Refactoring">
		<Command id = "MonoDevelop.Refactoring.RefactoryCommands.CreateMethod"
				defaultHandler = "MonoDevelop.CSharp.Refactoring.CreateMethod.CreateMethodHandler"
				_label = "Create Method"/>
		<Command id = "MonoDevelop.Refactoring.RefactoryCommands.ExtractMethod"
					defaultHandler = "MonoDevelop.CSharp.Refactoring.ExtractMethod.ExtractMethodHandler"
					_label = "Extract Method"
					shortcut = "Control|Alt|M"/>
	</Extension>
	-->
</Addin>